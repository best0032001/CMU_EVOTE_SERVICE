// <auto-generated />
using System;
using Evote_Service.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Evote_Service.Migrations
{
    [DbContext(typeof(EvoteContext))]
    [Migration("20220111124948_Add1")]
    partial class Add1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Evote_Service.Model.Entity.AdminLoginLog", b =>
                {
                    b.Property<int>("AdminLoginLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientIP")
                        .HasColumnType("longtext");

                    b.Property<string>("Cmuaccount")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AdminLoginLogId");

                    b.ToTable("AdminLoginLogs");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.ApplicationEntity", b =>
                {
                    b.Property<int>("ApplicationEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("longtext");

                    b.Property<bool>("CMUAuth")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ClientId")
                        .HasColumnType("longtext");

                    b.Property<bool>("LineAuth")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ServerProductionIP")
                        .HasColumnType("longtext");

                    b.HasKey("ApplicationEntityId");

                    b.ToTable("ApplicationEntitys");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.ConfirmVoter", b =>
                {
                    b.Property<int>("ConfirmVoterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventVoteEntityId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("VoteRoundEntityId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.HasKey("ConfirmVoterId");

                    b.HasIndex("VoteRoundEntityId");

                    b.ToTable("confirmVoters");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.EventVoteEntity", b =>
                {
                    b.Property<int>("EventVoteEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationEntityId")
                        .HasColumnType("int");

                    b.Property<string>("CreateUser")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EventCreate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("EventInformation")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EventRegisterEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventRegisterStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventStatusId")
                        .HasColumnType("int");

                    b.Property<string>("EventTitle")
                        .HasColumnType("longtext");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventVotingEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventVotingStart")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDev")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationFullNameTha")
                        .HasColumnType("longtext");

                    b.Property<string>("Organization_Code")
                        .HasColumnType("longtext");

                    b.Property<string>("PresidentEmail")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PresidentUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecretKey")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityAlgorithm")
                        .HasColumnType("longtext");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("longtext");

                    b.HasKey("EventVoteEntityId");

                    b.HasIndex("ApplicationEntityId");

                    b.ToTable("EventVoteEntitys");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.Ref.EventStatus", b =>
                {
                    b.Property<int>("EventStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EventStatusName")
                        .HasColumnType("longtext");

                    b.HasKey("EventStatusId");

                    b.ToTable("EventStatus");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.Ref.RefUserStage", b =>
                {
                    b.Property<int>("RefUserStageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserStageName")
                        .HasColumnType("longtext");

                    b.HasKey("RefUserStageID");

                    b.ToTable("RefUserStages");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.UserAdminEntity", b =>
                {
                    b.Property<int>("UserAdminEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Access_token")
                        .HasColumnType("longtext");

                    b.Property<string>("Cmuaccount")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("OrganizationFullNameTha")
                        .HasColumnType("longtext");

                    b.Property<string>("Organization_Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Refresh_token")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SMSExpire")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SMSOTP")
                        .HasColumnType("longtext");

                    b.Property<string>("SMSOTPRef")
                        .HasColumnType("longtext");

                    b.Property<bool>("SuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Tel")
                        .HasColumnType("longtext");

                    b.HasKey("UserAdminEntityId");

                    b.ToTable("UserAdminEntitys");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.UserEntity", b =>
                {
                    b.Property<int>("UserEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Access_token")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminApproved")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminApprovedIP")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminNotApproved")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminNotApprovedIP")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CommetNotApproved")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ConfirmEmailTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ConfirmKYCTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ConfirmPersonalIDTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ConfirmTelTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailOTP")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailOTPRef")
                        .HasColumnType("longtext");

                    b.Property<string>("Expires_in")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsConfirmEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsConfirmKYC")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsConfirmPersonalID")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsConfirmTel")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LineId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("NotApprovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Organization_Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Organization_Name_TH")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalID")
                        .HasColumnType("longtext");

                    b.Property<string>("Refresh_token")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SMSExpire")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SMSOTP")
                        .HasColumnType("longtext");

                    b.Property<string>("SMSOTPRef")
                        .HasColumnType("longtext");

                    b.Property<string>("Tel")
                        .HasColumnType("longtext");

                    b.Property<string>("UserCode")
                        .HasColumnType("longtext");

                    b.Property<int>("UserStage")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("dbPathFace")
                        .HasColumnType("longtext");

                    b.Property<string>("dbPathKYC")
                        .HasColumnType("longtext");

                    b.Property<string>("dbPathPersonalID")
                        .HasColumnType("longtext");

                    b.Property<string>("faceData")
                        .HasColumnType("longtext");

                    b.Property<string>("fileNameFace")
                        .HasColumnType("longtext");

                    b.Property<string>("fileNameKYC")
                        .HasColumnType("longtext");

                    b.Property<string>("fileNamePersonalID")
                        .HasColumnType("longtext");

                    b.Property<string>("fullPathFace")
                        .HasColumnType("longtext");

                    b.Property<string>("fullPathKYC")
                        .HasColumnType("longtext");

                    b.Property<string>("fullPathPersonalID")
                        .HasColumnType("longtext");

                    b.HasKey("UserEntityId");

                    b.ToTable("UserEntitys");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.VoteEntity", b =>
                {
                    b.Property<int>("VoteEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationEntityId")
                        .HasColumnType("int");

                    b.Property<int>("EventVoteEntityId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("VoteData")
                        .HasColumnType("longtext");

                    b.Property<int>("VoteRoundEntityId")
                        .HasColumnType("int");

                    b.HasKey("VoteEntityId");

                    b.HasIndex("VoteRoundEntityId");

                    b.ToTable("voteEntities");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.VoteRoundEntity", b =>
                {
                    b.Property<int>("VoteRoundEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventVoteEntityId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.HasKey("VoteRoundEntityId");

                    b.HasIndex("EventVoteEntityId");

                    b.ToTable("voteRoundEntities");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.VoterEntity", b =>
                {
                    b.Property<int>("VoterEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreateUser")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int>("EventVoteEntityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Organization_Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SMSExpire")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SMSOTP")
                        .HasColumnType("longtext");

                    b.Property<string>("SMSOTPRef")
                        .HasColumnType("longtext");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoterCreate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("VoterEntityId");

                    b.HasIndex("EventVoteEntityId");

                    b.ToTable("VoterEntitys");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.ConfirmVoter", b =>
                {
                    b.HasOne("Evote_Service.Model.Entity.VoteRoundEntity", null)
                        .WithMany("confirmVoters")
                        .HasForeignKey("VoteRoundEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.EventVoteEntity", b =>
                {
                    b.HasOne("Evote_Service.Model.Entity.ApplicationEntity", null)
                        .WithMany("EventVoteEntitys")
                        .HasForeignKey("ApplicationEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.VoteEntity", b =>
                {
                    b.HasOne("Evote_Service.Model.Entity.VoteRoundEntity", null)
                        .WithMany("voteEntities")
                        .HasForeignKey("VoteRoundEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.VoteRoundEntity", b =>
                {
                    b.HasOne("Evote_Service.Model.Entity.EventVoteEntity", null)
                        .WithMany("voteRoundEntities")
                        .HasForeignKey("EventVoteEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.VoterEntity", b =>
                {
                    b.HasOne("Evote_Service.Model.Entity.EventVoteEntity", null)
                        .WithMany("voterEntities")
                        .HasForeignKey("EventVoteEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.ApplicationEntity", b =>
                {
                    b.Navigation("EventVoteEntitys");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.EventVoteEntity", b =>
                {
                    b.Navigation("voterEntities");

                    b.Navigation("voteRoundEntities");
                });

            modelBuilder.Entity("Evote_Service.Model.Entity.VoteRoundEntity", b =>
                {
                    b.Navigation("confirmVoters");

                    b.Navigation("voteEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
